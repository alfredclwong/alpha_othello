from typing import Annotated, Literal
import numpy as np
import numpy.typing as npt

T_BOARD = Annotated[npt.NDArray[np.bool], Literal["size", "size", 2]]
T_MOVE = tuple[int, int]

def get_valid_moves(board: T_BOARD, player: bool) -> list[T_MOVE]:
    size = get_size(board)
    valid_moves = []

    for row in range(size):
        for col in range(size):
            move = (row, col)
            if is_valid_move(board, player, move):
                valid_moves.append(move)
    return valid_moves

def is_valid_move(board: T_BOARD, player: bool, move: T_MOVE) -> bool:
    if board[*move].any():
        return False
    flips = get_flips(board, player, move)
    return len(flips) > 0

def get_flips(board: T_BOARD, player: bool, move: T_MOVE) -> list[T_MOVE]:
    size = get_size(board)
    row, col = move
    flips = []
    directions = [
        (-1, -1),
        (-1, 0),
        (-1, 1),
        (0, -1),
        (0, 1),
        (1, -1),
        (1, 0),
        (1, 1),
    ]
    for dr, dc in directions:
        r, c = row + dr, col + dc
        temp_flips = []
        while 0 <= r < size and 0 <= c < size:
            if board[r, c, int(player)]:
                flips.extend(temp_flips)
                break
            elif board[r, c, int(not player)]:
                temp_flips.append((r, c))
                r += dr
                c += dc
            else:
                break
    return flips

def get_size(board: T_BOARD) -> int:
    return board.shape[0]

def ai(board: T_BOARD, player: bool, time_remaining: tuple[int, int]) -> T_MOVE:
    """
    AI function to select a move in the Othello game.

    Args:
        board (T_BOARD): The current state of the Othello board. board[:, :, 0] represents player 0's pieces,
                         and board[:, :, 1] represents player 1's pieces.
        player (bool): The current player (False for player 0, True for player 1).
        time_remaining (tuple[int, int]): Remaining time for both players in milliseconds.

    Returns:
        T_MOVE: The selected move as a tuple of coordinates (x, y).
    """
